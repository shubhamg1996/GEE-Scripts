/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var districts = ee.FeatureCollection("ft:1Fe-XCgp7FwSkb--iTHosIoKA8EiFH-G8805noi1I"),
    geometry = /* color: #0b4a8b */ee.Geometry.MultiPoint();
/***** End of imports. If edited, may not auto-convert in the playground. *****/
Map.setCenter(81.104, 26.85);
var district = ee.Number(132);
var year = '1992';
var colors = {'cyan': '#24C1E0', 'transparent': '#11ffee00', 'gray': '#F8F9FA'};
var BORDER_STYLE = '4px solid rgba(97, 97, 97, 0.05)';
var TITLE_STYLE = {
  fontWeight: '100',
  fontSize: '32px',
  padding: '10px',
  color: '#616161',
  backgroundColor: colors.transparent,
};
// Function to composite Landsat 8 SR imagery.
var compositeFunctionSR = function(image) {
  
  // Bits 3 and 5 are cloud shadow and cloud, respectively.
  var cloudShadowBitMask = ee.Number(2).pow(3).int();
  var cloudsBitMask = ee.Number(2).pow(5).int();
  
  var qa = image.select('pixel_qa');
  
  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0).and(
            qa.bitwiseAnd(cloudsBitMask).eq(0));
  
  // We may want these later.
  // var ndvi = image.normalizedDifference(['B5', 'B4']).rename('NDVI');
  // var ndwi = image.normalizedDifference(['B3', 'B5']).rename('NDWI');
  // var ndbi = image.normalizedDifference(['B6', 'B5']).rename('NDBI');
  // var indexMax = ndvi.max(ndwi).max(ndbi).rename('indexMax');
  
  return image
      // Scale the data to reflectance and temperature.
      // .select(['B[1-7]']).multiply(0.0001)
      // .addBands(image.select(['B10', 'B11']).multiply(0.1))
      .updateMask(mask);
};
// Function to composite Landsat 4,5,7 SR imagery.b
var cloudMaskL457 = function(image) {
  var qa = image.select('pixel_qa');
  // If the cloud bit (5) is set and the cloud confidence (7) is high
  // or the cloud shadow bit is set (3), then it's a bad pixel.
  var cloud = qa.bitwiseAnd(1 << 5)
          .and(qa.bitwiseAnd(1 << 7))
          .or(qa.bitwiseAnd(1 << 3))
  // Remove edge pixels that don't occur in all bands
  var mask2 = image.mask().reduce(ee.Reducer.min());
  return image.updateMask(cloud.not()).updateMask(mask2);
};
/*
 * Collection display defaults
 */
var VIZ_PARAMS_l8 = {bands: ['B4', 'B3', 'B2'], min: 0, max: 2000, gamma: 1.5};
var VIZ_PARAMS_l5 = {bands: ['B3', 'B2', 'B1'], min: 0, max: 2000, gamma: 1.5};
/*
 * Map panel setup
 */
/** Returns a ui.Map with some UI configuration in place */
function makeMapPanel() {
  var map = ui.Map();
  map.setCenter(80.569, 28.02);
  // Add an informational label
  map.add(ui.Label('Click the map to compute a mosaic at that location'));
  map.style().set('cursor', 'crosshair');
  // Don't show the layer list for this app.
  map.setControlVisibility({all: true});
  return map;
}
/*
 * Side panel setup
 */
// Create a layer selector that dictates which layer is visible on the map.
var selectyear = ui.Select({
  items: ['1992', '1995', '2000', '2008', '2010', '2013', '2016'],
  value: '1992',
  onChange: yearval
}); 
var selectdistrict = ui.Textbox({
  placeholder: "Enter distictid",
  value: 132,
  onChange: distval
});
// ****************** Main Panel *********************
var mainPanel = ui.Panel({
  layout: ui.Panel.Layout.flow('vertical', true),
  style: {
    height: '100%',
    width: '400px',
    backgroundColor: colors.gray,
    border: BORDER_STYLE,
  }
});
// Add the app title to the side panel
var titleLabel = ui.Label('Collection Mosaic Editor', TITLE_STYLE);
mainPanel.add(titleLabel);
mainPanel.add(ui.Label('Select Year:')).add(selectyear);
mainPanel.add(ui.Label('Enter District id:'))
          .add(selectdistrict)
          .add(ui.Button({
            label: 'composite',
            onClick: composite
          }));
 
/*
 * Helper methods
 */
/**
 * Recomputes a mosaic with the supplied IDs and adds it to the mapPanel.
 */
function updateMosaic(ids, currdistrict, year) {
  Map.layers().reset();
  if (ids.length === 0) {
    Map.layers().set(0, ee.Image());
    return;
  }
  var mosaickedImage = ee.ImageCollection(ids).median().clip(currdistrict);
  if ((year === "2016") || (year === "2013")){
    Map.layers().set(0, mosaickedImage.visualize(VIZ_PARAMS_l8));
  }else{
    Map.layers().set(0, mosaickedImage.visualize(VIZ_PARAMS_l5));
  }
}
/**
 * Updates the mapPanel when a new bounding box has
 * been chosen on the map.
 */
function updateUI(year, district) {
  var START_DATE = year+"-01-01"
  var END_DATE = year+"-12-31"
  var currdistrict = districts.filterMetadata('distId', 'equals', district);
  if ((year === "2016") || (year === "2013")){
   var images = ee.ImageCollection("LANDSAT/LC08/C01/T1_SR")
                          .filterBounds(currdistrict)
                          .filterDate(START_DATE, END_DATE)
                          .filter(ee.Filter.lte('CLOUD_COVER', 40))
                          .map(compositeFunctionSR);
  }else{
    images = ee.ImageCollection("LANDSAT/LT05/C01/T1_SR")
                          .filterBounds(currdistrict)
                          .filterDate(START_DATE, END_DATE)
                          .filter(ee.Filter.lte('CLOUD_COVER', 40))
                          .map(cloudMaskL457);
  }
  images.aggregate_array('system:id')
      .evaluate(function(ids) {
        // Sometimes there are no images where the user has clicked.
        if (ids === undefined) {
          return;
        }
        // Recompute the mosaic from the new image IDs and add to the mapPanel.
        updateMosaic(ids, currdistrict, year);
        // Center the map to the new mosaic
        Map.centerObject(currdistrict,12);
      });
      print("hello");
}
/*
 * Main app initialization
 */
// Use a SplitPanel so it's possible to resize the panels.
ui.root.insert(0, mainPanel);
function yearval(){
  year = selectyear.getValue();
  // print(year)
}
function distval(){
  district = ee.Number.parse(selectdistrict.getValue())
}
  // Add a click event to the map panel.
// mapPanel.onClick(function(coords) {
//   var point = ee.Geometry.Point(coords.lon, coords.lat);
//   var dot = ui.Map.Layer(point, {color: colors.cyan});
//   point.evaluate(function(geometryBbox) {
//     updateUI(geometryBbox, mapPanel, year, district);
//   });
//   // Set the dot to 1 so it's visible on top of the mosaic.
//   mapPanel.layers().set(1, dot);
// });
function composite(){
  updateUI(year, district);
}
// // Launch the app with an initial point pre-selected
// var initGeometry = ee.Geometry.Point([-79.91, 43.62]);
// mapPanel.centerObject(initGeometry);
// updateUI(initGeometry, mapPanel);
