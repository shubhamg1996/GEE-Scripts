// Load the NAIP collection.
var imageCollection = ee.ImageCollection('USDA/NAIP/DOQQ');
// ROI.
var geometry = ee.Geometry.Polygon([
  [[-121.89511299133301, 38.98496606984683],
    [-121.89511299133301, 38.909335196675435],
    [-121.69358253479004, 38.909335196675435],
    [-121.69358253479004, 38.98496606984683]]]);
// Load the CDL (2016).
var cdl2016 = ee.Image('USDA/NASS/CDL/2016');
// Pull out the cropland layer and clip to the ROI.
cdl2016 = cdl2016.select('cropland').clip(geometry);
var bands = ['R', 'G', 'B', 'N'];
// Create a mosaic from NAIP scenes taken between 2015 and 2017.
var image = imageCollection
  .filterDate('2015-01-01', '2017-01-01')
  .filterBounds(geometry)
  .mosaic();
// Clip to the ROI, normalize from 0-1, and pull out the bands of interest.
image = image.clip(geometry).divide(255).select(bands);
Map.addLayer(image, {gamma: 0.8}, 'RGB');
Map.centerObject(geometry, 13);
var seeds = ee.Algorithms.Image.Segmentation.seedGrid(36);
Map.addLayer(seeds.focal_max(2),{},'Seeds');
var samplePoints = image.addBands(cdl2016).updateMask(seeds).sample(geometry,5);
print(samplePoints.limit(1));
var classifier = ee.Classifier.randomForest(10).train(samplePoints,'cropland');
// Map.addLayer(image.classify(classifier).randomVisualizer(),{},'Classification');
Map.addLayer(ee.Image.load('users/saicheems/classification'),{},'Classification',false);
var snic = ee.Algorithms.Image.Segmentation.SNIC({
  image:image,
  compactness:2, connectivity:8, neighborhoodSize:256, seeds:seeds});
  var clusters = snic.select('clusters');
  Map.addLayer(clusters.randomVisualizer(),{},'Clusters',false);
var objectPropertiesImage = snic.select(['R_mean','G_mean','B_mean','N_mean']);
var samplePoints2= objectPropertiesImage.addBands(cdl2016).updateMask(seeds).sample(geometry,5);
var classifier2 = ee.Classifier.randomForest(10).train(samplePoints2,'cropland');
Map.addLayer(objectPropertiesImage.classify(classifier2).randomVisualizer(),{},'SNIC Classificaion',false);
var stdDev = image.addBands(clusters).reduceConnectedComponents({
  reducer:ee.Reducer.stdDev(), labelBand:'clusters', maxSize:256});
Map.addLayer(stdDev,{min:0,max:.1},'STD DEV',false);  
var area = ee.Image.pixelArea().addBands(clusters).reduceConnectedComponents({reducer:ee.Reducer.sum(), labelBand:'clusters', maxSize:256});
Map.addLayer(area,{min:50000,max:500000},'Area',false);
var minMax = clusters.reduceNeighborhood({
  kernel : ee.Kernel.square(1),
  reducer:ee.Reducer.minMax()
});
var perimeterPixels = minMax.select(0).neq(minMax.select(1));
var perimeter = perimeterPixels.addBands(clusters).reduceConnectedComponents(
  {reducer:ee.Reducer.sum(), labelBand:'clusters', maxSize:256});
  Map.addLayer(perimeterPixels,{min:0,max:1},'Perimeter pixels',false);
Map.addLayer(perimeter,{min:0,max:1900},'Perimeter',false);
var sizes= ee.Image.pixelLonLat().addBands(clusters).reduceConnectedComponents({
  reducer:ee.Reducer.minMax(), labelBand:'clusters', maxSize:256});
  var width = sizes.select('longitude_max').subtract(sizes.select(['longitude_min'])).rename('width');
  var height = sizes.select('latitude_max').subtract(sizes.select(['latitude_min'])).rename('height');
Map.addLayer(width,{min:0,max:0.02},'width',false);
Map.addLayer(height,{min:0,max:0.02},'height',false);
var objectPropertiesImage2 = ee.Image.cat([
  snic.select(['R_mean','G_mean','B_mean','N_mean']),
  stdDev,
  area,
  perimeter,
  width,
  height
  ]);
  var samplePoints3 = objectPropertiesImage2.addBands(cdl2016).updateMask(seeds).sample(geometry,5);
  var classifier3 = ee.Classifier.randomForest(10).train(samplePoints3,'cropland')
  Export.image.toAsset({
    description:'classification_snic_2',
    image:objectPropertiesImage2.classify(classifier3),
    region:geometry,
    scale:5
  });
  // Map.addLayer(ee.Image.load('usersproshubham1996/'))
